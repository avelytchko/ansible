---
  - name: Check if server exists in Nova
    shell: "source {{ os_client_project_script }} && openstack server list -f value -c Name -c 'Image Name' | grep -w '^{{ os_instance_name }}' | grep -w '{{ os_image_name }}$' | wc -l"
    register: os_server_status
    args:
      executable: /bin/bash

  - name: Check if provider port exists in Neutron
    shell: "source {{ os_client_project_script }} && neutron port-list -f value -c name | grep '{{ os_instance_name }}-port$' | wc -l"
    register: os_provider_port_status
    args:
      executable: /bin/bash

  - name: Check if floating ip already exists
    shell: "source {{ os_client_project_script }} && openstack floating ip list -f value -c 'Floating IP Address' | grep '^{{ os_instance_ip }}$' | wc -l"
    when: "os_network_type == 'selfservice'"
    register: os_floating_ip_status
    args:
      executable: /bin/bash

  - block:

    - name: Check if provider network exists in Neutron
      shell: "source {{ os_client_project_script }} && openstack network list -f value -c Name | grep -w '^{{ os_provider_network_name }}$' | wc -l"
      register: os_provider_network_status
      args:
        executable: /bin/bash

    - name: View provider network status in Neutron
      fail: msg="Provider network doesn't exists in Neutron. Skipping server creation. Exiting."
      when: "os_provider_network_status.stdout|int == 0"

    - name: Check if selfservice network exists in Neutron
      shell: "source {{ os_client_project_script }} && openstack network list -f value -c Name | grep -w '^{{ os_selfservice_network_name }}$' | wc -l"
      register: os_selfservice_network_status
      when: "os_network_type == 'selfservice'"
      args:
        executable: /bin/bash

    - name: View selfservice network status in Neutron
      fail: msg="Selfservice network doesn't exists in Neutron. Skipping server creation. Exiting."
      when: "os_network_type == 'selfservice' and os_selfservice_network_status.stdout|int == 0"

    - name: Check if image exists in Glance
      shell: "source {{ os_client_project_script }} && openstack image list -f value -c Name | grep -w '^{{ os_image_name }}$' | wc -l"
      register: os_image_glance_status
      args:
        executable: /bin/bash

    - name: View image status in Glance
      fail: msg="Image doesn't exists in Glance. Skipping server creation. Exiting."
      when: "os_image_glance_status.stdout|int == 0"

    - name: Check if security group exists
      shell: "source {{ os_client_project_script }} && openstack security group list -f value -c Name | grep -w '^{{ os_security_group_name }}$' | wc -l"
      register: os_security_group_status
      args:
        executable: /bin/bash

    - name: View security group status
      fail: msg="Security group doesn't exists. Skipping server creation. Exiting."
      when: "os_security_group_status.stdout|int == 0"

    - name: Check if flavor exists
      shell: "source {{ os_client_project_script }} && openstack flavor list -f value -c Name | grep -w '^{{ os_flavor_name }}$' | wc -l"
      register: os_flavor_status
      args:
        executable: /bin/bash

    - name: View flavor status
      fail: msg="Flavor doesn't exists. Skipping server creation. Exiting."
      when: "os_flavor_status.stdout|int == 0"

    - name: View server status in Nova
      debug: msg="Server already exists. Skipping creation."
      when: "os_server_status.stdout|int != 0"

    - name: Get project name
      shell: "cat {{ os_client_project_script }} | grep 'OS_PROJECT_NAME' | awk -F '=' '{ print $2 }'"
      register: os_project_name
      args:
        executable: /bin/bash

    - debug: var=os_project_name

    - name: Get project id
      shell: "source {{ os_client_admin_script }} && openstack project list -f value -c ID -c Name | grep '{{ os_project_name.stdout }}$' | awk '{ print $1 }'"
      register: os_project_id
      args:
        executable: /bin/bash

    - name: View provider port status
      debug: msg="Provider port already exists. Skipping creation."
      when: "os_server_status.stdout|int == 0 and os_provider_port_status.stdout|int != 0"

    - name: Create provider port for server
      shell: "source {{ os_client_admin_script }} && neutron port-create --fixed-ip ip_address={{ os_instance_ip }} --tenant-id {{ os_project_id.stdout }} --name {{ os_instance_name }}-port {{ os_provider_network_name }}"
      when: "os_server_status.stdout|int == 0 and os_network_type == 'provider' and os_provider_port_status.stdout|int == 0"
      args:
        executable: /bin/bash

    - name: Get provider port ID
      shell: "source {{ os_client_project_script }} && neutron port-list -f value -c id -c name | grep '{{ os_instance_name }}-port$' | awk '{ print $1 }'"
      register: os_provider_port_id
      when: "os_server_status.stdout|int == 0 and os_network_type == 'provider'"
      args:
        executable: /bin/bash

    - name: Create server in Nova (provider network)
      shell: "source {{ os_client_project_script }} && openstack server create --image {{ os_image_name }} --flavor {{ os_flavor_name }} --security-group {{ os_security_group_name }} --nic port-id={{ os_provider_port_id.stdout }} --key-name {{ os_key_name }} {{ os_instance_name }}"
      when: "os_server_status.stdout|int == 0 and os_network_type == 'provider'"
      args:
        executable: /bin/bash

    - name: View floating ip status
      debug: msg="Floating ip already exists. Skipping creation."
      when: "os_network_type == 'selfservice' and os_server_status.stdout|int == 0 and os_floating_ip_status.stdout|int != 0"

    - name: Create floating ip
      shell: "source {{ os_client_admin_script }} && neutron floatingip-create --floating-ip-address {{ os_instance_ip }} --tenant-id {{ os_project_id.stdout }} {{ os_provider_network_name }}"
      when: "os_network_type == 'selfservice' and os_floating_ip_status.stdout|int == 0 and os_server_status.stdout|int == 0"
      args:
        executable: /bin/bash

    - name: Get selfservice network id
      shell: "source {{ os_client_project_script }} && openstack network list -f value -c ID -c Name | grep '{{ os_selfservice_network_name }}$' | awk '{ print $1 }'"
      register: os_selfservice_network_id
      args:
        executable: /bin/bash

    - name: Create user-data temporary directory
      tempfile:
        state: directory
        suffix: os-user-data
      register: os_user_data_dir
      when: "os_server_status.stdout|int == 0"

    - name: Populate and copy user-data.txt from template
      template:
        src: "{{ playbook_dir}}/roles/os-cloud-init/templates/user-data.txt.j2"
        dest: "{{ os_user_data_dir.path }}/user-data.txt"
        mode: 0644
      when: "os_server_status.stdout|int == 0"

    - name: Create server in Nova (selfservice network)
      shell: "source {{ os_client_project_script }} && openstack server create --image {{ os_image_name }} --flavor {{ os_flavor_name }} --security-group {{ os_security_group_name }} --nic net-id={{ os_selfservice_network_id.stdout }} --key-name {{ os_key_name }} --user-data={{ os_user_data_dir.path }}/user-data.txt {{ os_instance_name }}"
      when: "os_server_status.stdout|int == 0 and os_network_type == 'selfservice'"
      args:
        executable: /bin/bash

    - name: Check status of server in Nova
      shell: "source {{ os_client_project_script }} && openstack server list -f value -c Name -c Status | grep -w '^{{ os_instance_name }}' | awk '{ print $2 }'"
      register: os_server_creating_status
      until: "'ACTIVE' in os_server_creating_status.stdout"
      retries: 15
      delay: 10
      when: "os_server_status.stdout|int == 0"
      args:
        executable: /bin/bash

    - name: Add floating ip to server (selfservice network)
      shell: "source {{ os_client_project_script }} && openstack server add floating ip {{ os_instance_name }} {{ os_instance_ip }}"
      when: "os_network_type == 'selfservice' and os_server_status.stdout|int == 0"
      args:
        executable: /bin/bash

    - name: Get IP of the server
      shell: "source {{ os_client_project_script }} && openstack server list -f value -c Name -c Networks | grep -w '^{{ os_instance_name }}' | awk -F '=' '{ print $2 }'"
      register: os_server_ip
      args:
        executable: /bin/bash

    - name: View IP of the server
      debug: msg="IP of the server is {{ os_server_ip.stdout }}"

    - name: Waiting for server to boot
      wait_for:
        host: "{{ os_instance_ip }}"
        port: 22
        state: started
        delay: 10
        timeout: 300

    when: "os_server_remove|default(False)|bool == False"

  - name: Delete server from Nova
    shell: "source {{ os_client_project_script }} && openstack server delete {{ os_instance_name }}"
    when: "os_server_status.stdout|int != 0 and os_server_remove|default(False)|bool == True"
    args:
      executable: /bin/bash

  - name: Delete floating ip (selfservice network)
    shell: "source {{ os_client_project_script }} && openstack floating ip delete {{ os_instance_ip }}"
    when: "os_network_type == 'selfservice' and os_floating_ip_status.stdout|int != 0 and os_server_remove|default(False)|bool == True"
    args:
      executable: /bin/bash

  - name: Delete provider port (provider network)
    shell: "source {{ os_client_project_script }} && openstack port delete {{ os_instance_name }}-port"
    when: "os_provider_port_status.stdout|int != 0 and os_server_remove|default(False)|bool == True and os_network_type == 'provider'"
    args:
      executable: /bin/bash

